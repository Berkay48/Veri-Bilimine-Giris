# -*- coding: utf-8 -*-
"""Ford_Araba_Satış_Tahmini(catboost)Son.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11yEfWUKa568CprLprxAHf9mNKC-bXllV

Gerekli Kütüphanleri Ekleme
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

!pip install catboost
from catboost import CatBoostRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

"""Veri setini okuma"""

df = pd.read_csv('ford.csv')
df.head(5)

"""NaN Değerlerini Kontrol Etme"""

nan_sayisi = df.isna().sum().sum()
print(f"NaN sayısı: {nan_sayisi}")

df.info()

"""En Yaşlı Ve Genç Arabayı Tespit Etme"""

min_year = df['year'].min()
min_year_cars = df[df['year'] == min_year]
print(f"En küçük yıl ({min_year}) değerine sahip kayıtlar:")
print(min_year_cars[['model', 'year', 'price']])

max_year = df['year'].max()
max_year_cars = df[df['year'] == max_year]
print(f"\nEn büyük yıl ({max_year}) değerine sahip kayıtlar:")
print(max_year_cars[['model', 'year','price']])

"""2060 Hatalı Veri!"""

df.head(17728)

unique_years = sorted(df['year'].unique(), reverse=True)

second_max_year = unique_years[1]
print(f"En büyük yıldan küçük en büyük yıl: {second_max_year}")

second_max_year_cars = df[df['year'] == second_max_year]
print(second_max_year_cars[['model', 'year','price']])

"""Hatalı Veriyi Düzeltme

"""

df.loc[df['year'] == 2060, 'year'] = 2006
print("Güncellenmiş yıl değerleri:", sorted(df['year'].unique()))

df.head(17728)

"""Yıllara Sıralama"""

df_sorted = df.sort_values(by=['year', 'model'], ascending=[True, True]).reset_index(drop=True)

df_sorted.head(15)

"""Korelasyon İçin Sayısallaştırma"""

df_encoded = df_sorted.copy()

non_numeric_cols = df_encoded.select_dtypes(include=['object']).columns
print("Sayısal olmayan sütunlar:", list(non_numeric_cols))

le = LabelEncoder()

for col in non_numeric_cols:
    df_encoded[col] = le.fit_transform(df_encoded[col])

print(df_encoded.dtypes)

corr_matrix = df_encoded.corr()

plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5)
plt.title("Özellikler Arası Korelasyon Matrisi")
plt.tight_layout()
plt.show()

"""Yıl Sütunun Yaşa Çevirme"""

df_encoded['age'] = 2020 - df_encoded['year']

df_encoded.drop(columns=['year'], inplace=True)

print(df_encoded[['age']].head())

"""Yaş Sütunu Varkenki Korelasyon

"""

corr_matrix = df_encoded.corr()

plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5)
plt.title("Özellikler Arası Korelasyon Matrisi (Age ile)")
plt.tight_layout()
plt.show()

zero_engine = df_encoded[df_encoded['engineSize'] == 0]


print(f"'engineSize' sütunu 0 olan {zero_engine.shape[0]} satır bulundu.")
print(zero_engine[['model', 'engineSize','price']])

initial_shape = df_encoded.shape
df_encoded = df_encoded[df_encoded['engineSize'] != 0]
final_shape = df_encoded.shape

print(f"engineSize = 0 olan {initial_shape[0] - final_shape[0]} satır silindi.")

zero_tax = df_encoded[df_encoded['tax'] == 0]
print(f"'tax' değeri 0 olan {zero_tax.shape[0]} satır bulundu.")
print(zero_tax[['model', 'tax', 'price','engineSize']])

tax_mean = df_encoded[df_encoded['tax'] != 0]['tax'].mean()
print(f"Vergisi 0 olmayan araçların ortalama tax değeri: {tax_mean:.2f}")

df_encoded.loc[df_encoded['tax'] == 0, 'tax'] = tax_mean

"""Model Eğitimi"""

selected_features = ['tax', 'engineSize', 'age', 'mileage']
X = df_encoded[selected_features]
y = df_encoded['price']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

cat_model = CatBoostRegressor(iterations=500,learning_rate=0.04,depth=7,l2_leaf_reg=3,loss_function='RMSE',random_strength=2,bagging_temperature=1,early_stopping_rounds=50,verbose=100,random_state=42)
cat_model.fit(X_train, y_train)


y_pred = cat_model.predict(X_test)
y_train_pred = cat_model.predict(X_train)


mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"MAE  : {mae:.2f}")
print(f"RMSE : {rmse:.2f}")
print(f"R²   : {r2:.4f}")

plt.figure(figsize=(14, 6))
plt.plot(y_test.values, label='Gerçek Fiyat (Test)', alpha=0.7)
plt.plot(y_pred, label='Tahmin Fiyat (CatBoost)', alpha=0.7)
plt.title('CatBoost - Test Setinde Gerçek vs Tahmin Edilen Araç Fiyatları')
plt.xlabel('Gözlem')
plt.ylabel('Fiyat')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

fig, axs = plt.subplots(2, 2, figsize=(14, 10))
axs = axs.flatten()

for i, feature in enumerate(selected_features):
    axs[i].scatter(X_test[feature], y_test, label='Gerçek Fiyat', alpha=0.6)
    axs[i].scatter(X_test[feature], y_pred, label='Tahmin Fiyat', alpha=0.6, marker='x')
    axs[i].set_xlabel(feature)
    axs[i].set_ylabel('Fiyat')
    axs[i].set_title(f'Fiyat vs {feature}')
    axs[i].legend()
    axs[i].grid(True)

plt.tight_layout()
plt.show()

plt.figure(figsize=(14, 6))
plt.plot(y_train.values, label='Gerçek Fiyat (Train)', alpha=0.7)
plt.plot(y_train_pred, label='Tahmin Fiyat (CatBoost)', alpha=0.7)
plt.title('CatBoost - Eğitim Setinde Gerçek vs Tahmin Edilen Araç Fiyatları')
plt.xlabel('Gözlem')
plt.ylabel('Fiyat')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

features = ['age', 'mileage', 'tax', 'engineSize']

fig, axs = plt.subplots(2, 2, figsize=(14, 10))
axs = axs.flatten()

for i, feature in enumerate(features):
    axs[i].scatter(X_train[feature], y_train, label='Gerçek Fiyat', alpha=0.6)
    axs[i].scatter(X_train[feature], y_train_pred, label='Tahmin Fiyat', alpha=0.6, marker='x')
    axs[i].set_xlabel(feature)
    axs[i].set_ylabel('Fiyat')
    axs[i].set_title(f'Train Seti: Fiyat vs {feature}')
    axs[i].legend()
    axs[i].grid(True)

plt.tight_layout()
plt.show()

r2_train = r2_score(y_train, y_train_pred)

mae_train = mean_absolute_error(y_train, y_train_pred)

rmse_train = np.sqrt(mean_squared_error(y_train, y_train_pred))

print("Eğitim Seti Performans Metrikleri:")
print(f"R²   : {r2_train:.4f}")
print(f"RMSE : {rmse_train:.2f}")
print(f"MAE  : {mae_train:.2f}")